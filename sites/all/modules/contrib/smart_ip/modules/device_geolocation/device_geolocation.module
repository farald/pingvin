<?php
// $Id: device_geolocation.module,v 1.1.2.3 2010/12/07 14:00:33 arpeggio Exp $

/**
 * @file
 * Provides visitor's geographical location using client device location source 
 * that implements W3C Geolocation API (with Google Gears as fallback) and 
 * Google Geocoding service.
 */

/**
 * Implements hook_init().
 */
function device_geolocation_init() {
  if (!isset($_SESSION['device_geolocation'])) {
    drupal_add_js('http://maps.google.com/maps/api/js?sensor=true');
    device_geolocation_get_coordinates();
    drupal_add_js('http://code.google.com/apis/gears/gears_init.js');
    drupal_add_js(drupal_get_path('module', 'device_geolocation') . '/js/device_geolocation.js');
  }
}

/**
 * Implements hook_block_info().
 */
function device_geolocation_block_info() {
  $blocks['visitor_geolocation'] = array(
    'info' => t("Visitor's geolocation"),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function device_geolocation_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'visitor_geolocation':
      $block['subject'] = t('Your Geolocation Details');
      $block['content'] = device_geolocation_contents();
      break;
  }
  return $block;
}

/**
 * Device geolocation block content function.
 */
function device_geolocation_contents() {
  // Smart IP user $_SESSION
  if (isset($_SESSION['smart_ip'])) {
    $location = $_SESSION['smart_ip']['location'];
  }
  // Smart IP user object data
  else {
    global $user;
    if (isset($user->data['geoip_location'])) {
      $_SESSION['smart_ip']['location'] = $user->data['geoip_location'];
      $location = $_SESSION['smart_ip']['location'];
    }
  }
  return theme('device_geolocation_visitor_info', array('location' => $location));
}

/**
 * Implements hook_theme()
 */
function device_geolocation_theme() {
  return array(
    'device_geolocation_visitor_info' => array(
      'render element' => 'location',
      'template'       => 'device-geolocation-visitor-info',
      'path'           => drupal_get_path('module', 'device_geolocation') . '/theme',
    ),
  );
}

 /**
 * Implements hook_help().
 */
function device_geolocation_help($path, $arg) {
  switch ($path) {
    case 'admin/help#device_geolocation':
      return '<p>' . 
      t("Provides visitor's geographical location using client device location source 
      that implements W3C Geolocation API (with Google Gears as fallback) whereas 
      the coordinates are geocoded using Google Geocoding service. Google Geocoding 
      returns a more detailed location information such as: street number, postal code, 
      route, neighborhood, locality, sublocality, establishment, administrative area level 1, 
      administrative area level 2, etc.") . '</p><p>' . 
      t("Smart IP is the last fallback if W3C Geolocation API or Google Gears failed. Even 
      if the visitors refuses to share their location, the geographical information provided 
      by Smart IP will be used to know your visitors' geolocation details. A themeable Block 
      content is available to show your visitor's geolocation information. Device Geolocation 
      merges its location data (collected at Google Geocoding service) with Smart IP visitor's 
      location data storage which is in session variable (@session) with array key 'smart_ip' 
      and Drupal @user->data object with array key 'geoip_location'.", array(
        '@session' => '$_SESSION',
        '@user'    => '$user',
      )) . '</p>';
      break;
  }
}

/**
 * Implements hook_menu().
 */
function device_geolocation_menu() {
  $items['field-coordinates'] = array(
    'page callback'    => 'device_geolocation_detector_ajax',
    'access callback'  => 'user_access',
    'access arguments' => array('access content'),
    'type'             => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Google Geocoding ajax callback function data recipient.
 */
function device_geolocation_detector_ajax() {
  if (isset($_POST['latitude']) && isset($_POST['longitude'])) {
    global $user;
    unset($_SESSION['device_geolocation']);
    foreach ($_POST as $label => $address) {
      if (!empty($address)) {
        $label = check_plain($label);
        $_SESSION['smart_ip']['location'][$label] = check_plain($address);
        $_SESSION['device_geolocation'] = TRUE;
      }
    }
    if (isset($_SESSION['smart_ip']['location']['postal_code']) && !empty($_SESSION['smart_ip']['location']['postal_code'])) {
      // 'postal_cod' already exist, remove the redundant 'zip'
      unset($_SESSION['smart_ip']['location']['zip']);
    }
    // Allow other modules to modify result via hook_device_geolocation_detector_ajax_alter()
    drupal_alter('device_geolocation_detector_ajax', $_SESSION['smart_ip']['location']);

    if (isset($_SESSION['smart_ip']['location']) && $user->uid) {
      user_save($user, array('data' => array('geoip_location' => $_SESSION['smart_ip']['location'])));
    }
  }
}

/**
 * Get Visitor's coordinates.
 */
function device_geolocation_get_coordinates() {
  global $user;
  $latitude  = 0;
  $longitude = 0;

  // Smart IP user $_SESSION
  if (isset($_SESSION['smart_ip']) && !empty($_SESSION['smart_ip']['location']['latitude'])) {
    $latitude  = $_SESSION['smart_ip']['location']['latitude'];
    $longitude = $_SESSION['smart_ip']['location']['longitude'];
  }
  // Smart IP user object data
  elseif (isset($user->data['geoip_location']) && !empty($user->data['geoip_location']['latitude'])) {
    $_SESSION['smart_ip']['location'] = $user->data['geoip_location'];
    $latitude  = $_SESSION['smart_ip']['location']['latitude'];
    $longitude = $_SESSION['smart_ip']['location']['longitude'];
  }
  // None, then determine user's geo location via smart_ip_get_location()
  else {
    $_SESSION['smart_ip']['location'] = smart_ip_get_location(ip_address());
    if ($user->uid) {
      user_save($user, array('data' => array('geoip_location' => $_SESSION['smart_ip']['location'])));
    }
    if ($_SESSION['smart_ip']['location']) {
      $latitude  = $_SESSION['smart_ip']['location']['latitude'];
      $longitude = $_SESSION['smart_ip']['location']['longitude'];
    }
    else {
      unset($_SESSION['smart_ip']);
    }
  }
  $coordinates = array(
    'latitude'   => $latitude,
    'longitude'  => $longitude,
    'debug_mode' => isset($_SESSION['smart_ip']['debug_mode']) ? TRUE : FALSE,
  );
  // Send also to javascript
  drupal_add_js(array('device_geolocation' => $coordinates), 'setting');
  return $coordinates;
}
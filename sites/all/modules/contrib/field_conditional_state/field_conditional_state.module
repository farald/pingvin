<?php

/**
 * Implements hook_menu().
 */
function field_conditional_state_menu() {
  $items = array();
  foreach (entity_get_info() as $entity_type => $entity_info) {
    if ($entity_info['fieldable']) {
      foreach ($entity_info['bundles'] as $bundle_name => $bundle_info) {
        if (isset($bundle_info['admin'])) {
          // Extract path information from the bundle.
          $path = $bundle_info['admin']['path'];
          if (isset($bundle_info['admin']['bundle argument'])) {
            $bundle_arg = $bundle_info['admin']['bundle argument'];
            $bundle_pos = (string) $bundle_arg;
          }
          else {
            $bundle_arg = $bundle_name;
            $bundle_pos = '0';
          }
          $field_position = count(explode('/', $path)) + 1;

          $items["$path/fields/%field_ui_menu/field-conditional-states"] = array(
            'load arguments' => array($entity_type, $bundle_arg, $bundle_pos, '%map'),
            'title' => 'Conditional states',
            'page callback' => 'drupal_get_form',
            'page arguments' => array('field_conditional_state_settings_form', $field_position),
            'type' => MENU_LOCAL_TASK,
            'access arguments' => array('administer field conditional states'),
            'weight' => 4,
            'file' => 'field_conditional_state.admin.inc'
          ); 
        }
      }
    }
  }
  return $items;
}

/**
 * Implements hook_permission().
 */
function field_conditional_state_permission() {
  return array(
    'administer field conditional states' => array(
      'title' => t('Administer field conditional states'), 
    ),
  );
}

/**
 * Implements hook_theme().
 */
 function field_conditional_state_theme() {
  return array(
    'field_conditional_state_settings_form' => array(
      'render element' => 'form',
    ),
  );
}
 
/**
 * Implements hook_field_delete_instance().
 */
function field_conditional_state_field_delete_instance($instance) {
  $bundle = $instance['bundle'];
  $instance_name = $instance['field_name'];
  $query_args = array(
    ':bundle' => $bundle,
    ':field_name' => $instance_name,
    ':control_field' => $instance_name,
  );
  $result = db_query("SELECT count(*) as count FROM {field_conditional_state} WHERE bundle = :bundle AND (field_name = :field_name OR control_field = :control_field)", $query_args)->fetchObject();
  // delete conditions for deleted instance
  if ($result->count > 0) {
    $delete_trigger_instance = db_delete('field_conditional_state')
      ->condition('field_name', $instance_name)
      ->condition('bundle', $bundle)
      ->execute();
    $delete_control_instance = db_delete('field_conditional_state')
      ->condition('control_field', $instance_name)
      ->condition('bundle', $bundle)
      ->execute();
  }
}

/**
 * Implements hook_field_attach_delete_bundle().
 */
function field_conditional_state_field_attach_delete_bundle($entity_type, $bundle, $instances) {
  $query_args = array(':bundle' => $bundle);
  $result = db_query("SELECT count(*) as count FROM {field_conditional_state} WHERE bundle = :bundle", $query_args)->fetchObject();
  // delete conditions for deleted bundle
  if ($result->count > 0) {
    $delete_trigger_field = db_delete('field_conditional_state')
      ->condition('bundle', $bundle, '=')
      ->execute();
  }
}

/**
 * Implements hook_form_alter().
 */
function field_conditional_state_form_alter(&$form, &$form_state, $form_id) {
  $conditional_bundle_types = field_conditional_state_get_bundle_types();
  if (isset($form['#bundle'])) {
    $f_id = $form['#bundle'] . '_' . $form['#entity_type'] . '_form';
    if (in_array($form['#bundle'], $conditional_bundle_types) && $form_id = $f_id) {
      $form = field_conditional_state_alter_form($form, $form_state);  // alter form
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * support for profile2 module
 */
function field_conditional_state_form_user_profile_form_alter(&$form, &$form_state) {
  if (module_exists('profile2') && isset($form['profile_main'])) {
    $form['profile_main'] = field_conditional_state_alter_form($form['profile_main'], $form_state);
  }
}


/**
 * field_conditional_state_alter_form()
 * main function to set states in the form
 * @param $form
 * @param $form_state
 */
function field_conditional_state_alter_form($form, $form_state) {
  // add js code to extend states.Dependent.comparisons object from states.js
  drupal_add_js(drupal_get_path('module', 'field_conditional_state') . '/js/conditional_state.js'); 
  $target_fields = field_conditional_state_get_target_bundle_fields($form['#bundle']);
  foreach ($target_fields as $target_field_name) {
    $target_field_conditions = field_conditional_state_get_field_conditions($target_field_name, $form['#bundle']);
    $field_info = field_info_instance($form['#entity_type'], $target_field_name, $form['#bundle']) ;
    foreach ($target_field_conditions as $condition_settings) {
      $form[$condition_settings['control_field']]['#prefix'] = '<div class = "conditional_state_control_field_' . $condition_settings['control_field'] . '">';
      $form[$condition_settings['control_field']]['#suffix'] = '</div>';
    } 
    $field_states = field_conditional_state_set_field_state($target_field_conditions);
    $conditional_states = field_conditional_state_module_invoke();
    foreach ($field_states as $state => $condition) {
      if (isset($form[$target_field_name]['#language'])) {
        $function = $conditional_states[$state];
        $form = $function($form, $form_state, $field_info, $state, $condition);
      }
    }
  }
  return $form;
}

/**
 * Implements hook_field_state().
 * define array with state type as key and handler as value
 * handler params: $form, $form_state, $field_info, $state, $condition
 */
function field_conditional_state_field_state() {
  return array(
    'visible' => 'field_conditional_state_handle_visibility',
    'invisible' => 'field_conditional_state_handle_visibility',
    'enabled' => 'field_conditional_state_handle_availability',
    'disabled' => 'field_conditional_state_handle_availability',
    'required' => 'field_conditional_state_handle_requirements',
  );
}

/**
 * field_conditional_state_handle_requirements()
 * handler for 'required' state
 */
function field_conditional_state_handle_requirements($form, $form_state, $field_info, $state, $condition) {
  $target_field_name = $field_info['field_name'];
  $lang = $form[$target_field_name]['#language'];
  $target_field_conditions = field_conditional_state_get_field_conditions($target_field_name, $form['#bundle']);
  $form[$target_field_name]['#states'][$state] = $condition;
  drupal_add_js(drupal_get_path('module', 'field_conditional_state') . '/js/required_conditional_state.js'); 
  if ($form_state['input']) {
    $input = isset($form_state['input']['profile_main']) ? $form_state['input']['profile_main'] : $form_state['input'];
    $is_required = FALSE;
    foreach ($target_field_conditions as $field_condition) {
      if ($field_condition['state'] == 'required') {
        $trigger_value_exist = FALSE;
        $control_field_name = $field_condition['control_field'];
        if ($input[$control_field_name] != NULL) {
          $trigger_value_exist = field_conditional_state_trigger_value_in_field_value($input[$control_field_name][$lang], $field_condition['trigger_values'], $field_condition['condition_type']);
          if ($trigger_value_exist) {
            //if one of the submitted field values in not in trigger values, target field is not required
            $is_required = TRUE;
          }
        }
      }
    }
    
    if ($is_required) {
      if (isset($form[$target_field_name][$lang][0]['value'])) {
        $form[$target_field_name][$lang][0]['value']['#required'] = TRUE;
      }
      else {
        if (isset($input[$target_field_name]) && is_array($input[$target_field_name][$lang])) {
          if (in_array('_none', $input[$target_field_name][$lang])) { // check if '_none' option has been selected
            form_set_error($target_field_name, t('@f field is required', array('@f' => $field_info['label'])));
          }
        }
        $form[$target_field_name][$lang]['#required'] = TRUE;
      }
    }
  }
  return $form;
}

/**
 * field_conditional_state_handle_availability()
 * handler for 'disable', 'enable' states
 */
function field_conditional_state_handle_availability($form, $form_state, $field_info, $state, $condition) {
  $target_field_name = $field_info['field_name'];
  $lang = $form[$target_field_name]['#language'];
  switch ($field_info['widget']['type']) {
    case 'options_select':
      $form[$target_field_name][$lang]['#states'][$state] = $condition;
      break;
    case 'options_buttons':
    case 'options_onoff':
      foreach ($form[$target_field_name][$lang]['#options'] as $option_id => $value) {
        $form[$target_field_name][$lang][$option_id]['#states'][$state] = $condition;
      }
      break;
    case 'text_textfield': 
    case 'text_textarea' :
      foreach ($form[$target_field_name][$lang] as $delta => $value) {
        $delta = (int) $delta;
        $form[$target_field_name][$lang][$delta]['value']['#states'][$state] = $condition;
      }
      break;
    case 'text_textarea_with_summary':
      foreach ($form[$target_field_name][$lang] as $delta => $value) {
        $delta = (int) $delta;
        $form[$target_field_name][$lang][$delta]['#states'][$state] = $condition;
      }
      break;
  }
  return $form;
}

/**
 * field_conditional_state_handle_visibility()
 * handler for 'visible', 'invisible' state
 */
function field_conditional_state_handle_visibility($form, $form_state, $field_info, $state, $condition) {
  $target_field_name = $field_info['field_name'];
  $lang = $form[$target_field_name]['#language'];
  $form[$target_field_name]['#states'][$state] = $condition;
  // if terget field attribute #required is set to TRUE and field is not visible set #requied attribute to false to save the form
  if ($form_state['input'] && $form[$target_field_name][$lang]['#required'] == TRUE) {
    $input = isset($form_state['input']['profile_main']) ? $form_state['input']['profile_main'] : $form_state['input'];
    $target_field_conditions = field_conditional_state_get_field_conditions($target_field_name, $form['#bundle']);
    foreach ($target_field_conditions as $field_condition) {
      if ($field_condition['state'] == 'visible' || $field_condition['state'] == 'invisible') {
        $control_field_name = $field_condition['control_field'];
        $trigger_value_exist = FALSE;
        if ($input[$control_field_name][$lang] != NULL) {
          $trigger_value_exist = field_conditional_state_trigger_value_in_field_value($input[$control_field_name][$lang], $field_condition['trigger_values'], $field_condition['condition_type']);
        }
        if ($field_condition['state'] == 'visible' && !$trigger_value_exist) {
          unset($form[$target_field_name]);
        }
        elseif ($field_condition['state'] == 'invisible' && $trigger_value_exist) {
          unset($form[$target_field_name]);
        }
      }
    }
  }
  return $form;
}

/**
 * field_conditional_state_target_value_in_field_value()
 * search condition target values in field values
 * @param $values
 *   Current values for the field.
 * @param $target_values
 *   Target values for the condition.
 */
function field_conditional_state_trigger_value_in_field_value($values, $trigger_values, $condition_type) {
  if ($condition_type == 'or') {
    // for this condition if one of the submitted value is in trigger values return true
    if (is_array($values)) {
      foreach ($values as $delta => $value) {
        foreach ($trigger_values as $trigger_value) {
          if (is_array($value)) {
            $search = array_search($trigger_value, $value);
            if ($search) {
              // target value is set in field value - return TRUE
              return TRUE;
            }
          } 
          elseif ($value == $trigger_value) {
            return TRUE;
          }
        }
      }
    }
    else {
      if (in_array($values, $trigger_values)) {
        return TRUE;
      }
    }
  }
  else {  //condition type is and, all trigger values needs to be in submitted values
    $return = TRUE;
    foreach ($trigger_values as $key => $trigger_value) {
      if (!in_array($trigger_value, $values)) {
        $return = FALSE;
      }
    }
    return $return;
  }
  return FALSE;
}

/**
 * field_conditional_state_set_field_state()
 * set states for target field
 * @param $conditions
 *   state conditions
 */
function field_conditional_state_set_field_state($conditions) {
  $states = array();
  foreach ($conditions as $condition_settings) {
    drupal_add_js(array('conditionType' => $condition_settings['condition_type']), 'setting');
    $selector = '.conditional_state_control_field_' . $condition_settings['control_field'] . ' :input';
    $condition_values = array();
    if ($condition_settings['trigger_values']) {
      foreach ($condition_settings['trigger_values'] as $c_value) {
        $condition_values[] = $c_value;
      }
    } 
    else {
      $condition_values = $condition_settings['trigger_values'];
    }
    $states[$condition_settings['state']][$selector] = array('value' => $condition_values);
  }
  return $states;
}
 
/**
 * field_conditional_state_module_invoke()
 */
function field_conditional_state_module_invoke() {
  $conditional_states = array();
  foreach (module_implements('field_state') as $module) {
    $function = $module . '_field_state';
    $conditional_states += $function();
  }
  return $conditional_states;
}

/**
 * field_conditional_state_get_field_conditions()
 * get conditions for the field
 * @param $field_name
 * @param $bundle	
 * @return $conditions
 */
function field_conditional_state_get_field_conditions($field_name, $bundle) {
  $conditions = array();
  $result = db_query("SELECT * FROM {field_conditional_state} WHERE field_name = :field_name AND bundle = :bundle", array(':field_name' => $field_name, ':bundle' => $bundle));
  foreach ($result as $res) {
    $condition_id = 'condition_' . $res->id;
    $conditions[$condition_id] = array(
      'id' => $res->id,
      'control_field' => $res->control_field,
      'state' => $res->state,
      'trigger_values' => unserialize($res->trigger_values),
      'condition_type' => $res->condition_type,
    );
  }
  return $conditions;
}

/**
 * field_conditional_state_get_bundle_types()
 * get all the conditions bundle types 
 * @return $bundle_types
 */
function field_conditional_state_get_bundle_types() {
  $bundle_types = array();
  $result = db_query("SELECT bundle FROM {field_conditional_state}");
  foreach ($result as $res) {
    $bundle_types[] = $res->bundle;
  }
  return $bundle_types;
}

/**
 * field_conditional_state_get_target_bundle_fields
 * get all the target fields for bundle types
 * @param $bundle	
 * @return $target_fields
 */
function field_conditional_state_get_target_bundle_fields($bundle) {
  $target_fields = array();
  $result = db_query("SELECT field_name FROM {field_conditional_state} WHERE bundle = :bundle GROUP BY field_name", array(':bundle' => $bundle));
  foreach ($result as $res) {
    $target_fields[] = $res->field_name;
  }
  return $target_fields;
}

<?php
// $Id: commentaccess.module,v 1.4 2011/02/17 00:13:26 rschwab Exp $

/**
 * @file
 *
 * Provides users with permissions for comments on nodes they own.
 */

/**
 * Implementation of hook_help().
 */
function commentaccess_help($path, $arg) {
  switch ($path) {
    case 'admin/help#commentaccess':
      return '<p>'. t("This module lets users delete comments on nodes they create without giving them full comment administration access. Permissions are on a per node type basis, so it is a great way to, e.g., allow users to administer comments on their own blogs. Additionally, you can configure this module to force comments on selected node types to be approved before they get published. As with delete rights, this is administered by users so you don't have to do it yourself.") .'</p>';
      break;
    case 'admin/modules#description':
      return t('Provides users with permissions for comments on nodes they own..');
      break;
  }
}

/**
 * Implementation of hook_menu().
 */
function commentaccess_menu() {
  $items = array();
  $items['admin/content/comment/commentaccess'] = array(
    'title' => 'Approval options',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commentaccess_admin_settings'),
    'file' => 'commentaccess.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer comments'),
    'weight' => 20,
  );
  return $items;
}

/**
 * Implementation of hook_menu_alter()
 */
function commentaccess_menu_alter(&$items) {
  $items['comment/%/approve']['access callback'] = 'commentaccess_access_check';
  $items['comment/%/approve']['access arguments'] = array(1, 'approve');
  $items['comment/%/delete']['access callback'] = 'commentaccess_access_check';
  $items['comment/%/delete']['access arguments'] = array(1, 'delete');
}

/**
 * Implementation of hook_permission().
 * @return array $perms
 */
function commentaccess_permission() {
  $perms = array();

  foreach (node_type_get_types() as $node) {
    $type = check_plain($node->type);
    $perms += array(
      "administer comments on own $type" => array(
        'title' => t('%type: Administer comments on own content', array('%type' => $node->name)),
      ),
    );
    $perms += array(
      "approve comments on own $type" => array(
        'title' => t('%type: Approve comments on own content', array('%type' => $node->name)),
      ),
    );
    $perms += array(
      "delete comments on own $type" => array(
        'title' => t('%type: Delete comments on own content', array('%type' => $node->name)),
      ),
    );
  }

  return $perms;
}

/**
 * Implementation of hook_comment_presave()
 *
 * Enforces the approval queue, shows the approval message, and
 * optionally sends the e-mail notification to nodeauthor.
 */
function commentaccess_comment_presave($comment) {
  if (commentaccess_access_check($comment, 'comment')) {
    $node = node_load($comment->nid);

    // Set the comment to an unpublished state
    $comment->status = COMMENT_NOT_PUBLISHED;

    // Set the approval queue message for the comment author
    $status_msg_php = variable_get('commentaccess_approval_php');
    if ($status_msg_php != '' && module_exists('php')) {
      $status_msg = php_eval($status_msg_php);
    }
    else {
      $status_msg = variable_get('commentaccess_approval_msg', "Your comment will be posted once it's been approved.");
      $status_msg = t($status_msg, array(
        '@poster'     => (!empty($comment->name)) ? $comment->name : variable_get('anonymous', 'anonymous'),
        '@node_owner' => $node->name,
        '@subject'    => $comment->subject,
      ));
    }
    drupal_set_message($status_msg);

    // Send the mail if enabled
    $nodeauthor = user_load($node->uid);
    if ($nodeauthor->data['commentaccess_email']) {
      $replacements = array(
        '@approver' => $node->name,
        '@subject' => $comment->subject,
        '@comment' => $comment->comment,
        '@commenter' => (!empty($comment->name)) ? $comment->name : variable_get('anonymous', 'anonymous'),
        '@nodelink' => url('node/'. $node->nid, array('absolute' => TRUE)),
        '@commentlink' => url('node/'. $node->nid, array('absolute' => TRUE, 'fragment' => 'comment-'. $comment->cid)),
        '@site' => variable_get("site_name", "Drupal"),
        '@siteurl' => $GLOBALS["base_url"],
      );
      $params = array('replacements' => $replacements);
      drupal_mail('commentaccess', 'commentaccess_email', $nodeauthor->mail, user_preferred_language($nodeauthor), $params);
    }
  }
}

/**
 * Implementation of hook_comment_view()
 *
 * Adds approve and delete links for node authors
 */
function commentaccess_comment_view($comment, $view_mode, $langcode) {
  // Comment module adds these links for users with 'administer comments'
  if (!user_access('administer comments')){
    if (commentaccess_access_check($comment, 'delete')) {
      $comment->content['links']['comment']['#links']['commentaccess-delete'] = array(
        'title' => t('delete'),
        'href' => 'comment/'. $comment->cid . '/delete',
        'html' => TRUE,
      );
    }

    if (commentaccess_access_check($comment, 'approve')) {
      $comment->content['links']['comment']['#links']['commentaccess-approve'] = array(
        'title' => t('approve'),
        'href' => 'comment/' . $comment->cid . '/approve',
        'html' => TRUE,
        'query' => array('token' => drupal_get_token("comment/$comment->cid/approve")),
      );
    }
  }
}

/**
 * Implementation of hook_node_view().
 *
 * Shows unapproved comments to node authors.
 */
function commentaccess_node_view($node, $view_mode) {
  // Only add to full node views for users without 'administer comments'
  if ($node->comment && $view_mode == 'full' && node_is_page($node) && empty($node->in_preview) && !user_access('administer comments')) {
    global $user;
    if ($node->uid == $user->uid && (user_access("approve comments on own $node->type") || user_access("administer comments on own $node->type"))) {
      // Adapted from comment_node_page_additions().
      $additions = array();
      $mode = variable_get('comment_default_mode_' . $node->type, COMMENT_MODE_THREADED);
      $comments_per_page = variable_get('comment_default_per_page_' . $node->type, 50);
      // Adapted from comment_get_thread()
      $query = db_select('comment', 'c')->extend('PagerDefault');
      $query->addField('c', 'cid');
      $query
        ->condition('c.nid', $node->nid)
        ->addTag('node_access')
        ->addTag('comment_filter')
        ->addMetaData('node', $node)
        ->limit($comments_per_page);

      $count_query = db_select('comment', 'c');
      $count_query->addExpression('COUNT(*)');
      $count_query
        ->condition('c.nid', $node->nid)
        ->addTag('node_access')
        ->addTag('comment_filter')
        ->addMetaData('node', $node);

      $query->condition('c.status', 0);
      $count_query->condition('c.status', 0);

      if ($mode === COMMENT_MODE_FLAT) {
        $query->orderBy('c.cid', 'ASC');
      }
      else {
        // See comment above. Analysis reveals that this doesn't cost too
        // much. It scales much much better than having the whole comment
        // structure.
        $query->addExpression('SUBSTRING(c.thread, 1, (LENGTH(c.thread) - 1))', 'torder');
        $query->orderBy('torder', 'ASC');
      }

      $query->setCountQuery($count_query);
      $cids = $query->execute()->fetchCol();

      // Back to comment_node_page_additions()
      if ($cids) {
        $comments = comment_load_multiple($cids);
        comment_prepare_thread($comments);
        $build = comment_view_multiple($comments, $node);
        $build['pager']['#theme'] = 'pager';
        $additions['comments'] = $build;
      }
      if ($additions) {
        $additions += array(
          '#theme' => 'comment_wrapper__node_' . $node->type,
          '#node' => $node,
          'comments' => array(),
          'comment_form' => array(),
        );
        $node->content['commentaccess'] = $additions;
      }
    }
  }
}

/**
 * Implementation of hook_form_alter().
 *
 * Adds the comment administration fields to the node edit form.
 */
function commentaccess_form_alter(&$form, $form_state, $form_id) {
  if (isset($form['type']) && isset($form['#node'])) {
    global $user;
    $type = $form['type']['#value'];

    if($type .'_node_form' == $form_id) {
      $form['comment_settings']['#access'] |= ($user->uid == $form['#node']->uid && user_access("administer comments on own $type"));
    }
  }
}

/*
 * Implementation of hook_form_FORM_ID_alter().
 *
 * Bypasses comment.module to enable the custom approval queue message.
 */
function commentaccess_form_comment_form_alter(&$form, &$form_state) {
  $form['actions']['submit']['#submit'] = array('commentaccess_form_submit');
}

/*
 * Implementation of hook_form_FORM_ID_alter().
 *
 * Adds options to the user edit form.
 */
function commentaccess_form_user_profile_form_alter(&$form, &$form_state) {
  if ($form['#user_category'] == 'account') {
    $account = $form['#user'];

    // Iterate through node types, add checkbox if user has access
    foreach (node_type_get_types() as $node) {
      $type = $node->type;
      if (node_access('create', $type)) {
        if (user_access("approve comments on own $type") || user_access("administer comments on own $type")) {
          $form['commentaccess_settings']["commentaccess_skip_$type"] = array(
            '#type' => 'checkbox',
            '#title' => t("$node->name: skip comment approvals"),
            '#default_value' => isset($account->data["commentaccess_skip_$type"]) ? $account->data["commentaccess_skip_$type"] : 1,
            '#description' => t('Check this to allow other people to comment on your posts without approval (Administrators may always comment without approval).'),
          );
        }
      }
    }
    // If user has options, wrap them in a fieldset and provide e-mail option
    if (!empty($form['commentaccess_settings'])) {
      $commentaccess_settings = array(
        '#type'        => 'fieldset',
        '#title'       => t('Comment Access Settings'),
        '#weight'      => 5,
        '#collapsible' => TRUE,
      );
      $form['commentaccess_settings'] = array_merge($form['commentaccess_settings'], $commentaccess_settings);
      $form['commentaccess_settings']['commentaccess_email'] = array(
        '#type'          => 'checkbox',
        '#title'         => t('Receive e-mail notifications'),
        '#default_value' => isset($account->data['commentaccess_email']) ? $account->data['commentaccess_email'] : 1,
        '#description'   => t('Check this to receive e-mail notifications when new comments need your approval.'),
      );
    }
  }
}

/**
 * Implements hook_user_presave().
 */
function commentaccess_user_presave(&$edit, $account, $category) {
  if (isset($edit['commentaccess_email'])) {
    $edit['data']['commentaccess_email'] = $edit['commentaccess_email'];
  }
  foreach (node_type_get_types() as $node) {
    $type = $node->type;
    if (isset($edit["commentaccess_skip_$type"])) {
      $edit['data']["commentaccess_skip_$type"] = $edit["commentaccess_skip_$type"];
    }
  }
}

/**
 * This function checks comment access permissions.
 * @param object $comment The object to check
 * @param string $op delete, approve or comment
 * @return booleen TRUE or FALSE dependent from the $op
 */
function commentaccess_access_check($comment, $op = '') {
  global $user;
  // Menu system sometimes sends just cid
  if (!is_object($comment)) {
    $comment = comment_load($comment);
  }
  $node = node_load($comment->nid);
  switch ($op) {
    case 'delete':
      if (!$user->uid) {
        return FALSE;
      }
      if (user_access('administer comments')) {
        return TRUE;
      }
      elseif (user_access("administer comments on own $node->type") && ($user->uid == $node->uid)) {
        return TRUE;
      }
      elseif (user_access("delete comments on own $node->type") && ($user->uid == $node->uid)) {
        return TRUE;
      }
      break;

    case 'approve':
      if (!$user->uid) {
        return FALSE;
      }
      if ($comment->status == COMMENT_NOT_PUBLISHED) {
        if (user_access('administer comments')) {
          return TRUE;
        }
        elseif (user_access("administer comments on own $node->type") && ($user->uid == $node->uid)) {
          return TRUE;
        }
        elseif (user_access("approve comments on own $node->type") && ($user->uid == $node->uid)) {
          return TRUE;
        }
      }
      break;

    case 'comment':
      // True if the comment needs approval
      if ($node->uid == $user->uid) {
        return FALSE;
      }
      elseif (user_access('skip comment approval')) {
        return FALSE;
      }
      else {
        // Check if the node author wants to skip approvals
        $owner = user_load($node->uid);
        return commentaccess_requires_approval($node->type, $owner);
      }
      break;

    default:
      return FALSE;
  }// end switch $op
}

/**
 * Determines if a node author wants to skip comment approvals
 *
 * @param string $type - The name of the node type
 * @param object $owner - The author of the node
 *
 * @return bool - TRUE if comments require approval, FALSE if not
 */
function commentaccess_requires_approval($type, $owner = 0) {
  // Make sure we have a valid user object for node author
  if (is_object($owner) && $owner->uid) {
    $skip_approval_field = "commentaccess_skip_{$type}";
    if ($owner->data["$skip_approval_field"] == 1 ) {
      return FALSE;
    }
    else {
      return TRUE;  // node author enabled their approval queue
    }
  }
  else { // Didn't get a valid user object
    return FALSE;
  }
}

/**
 * Modification of comment_form_submit()
 *
 * The only change is in the approval queue if block. If a comment saves
 * as unpublished, the message is set in commentaccess_comment_presave().
 */
function commentaccess_form_submit($form, &$form_state) {
  $node = node_load($form_state['values']['nid']);
  $comment = comment_form_submit_build_comment($form, $form_state);
  if (user_access('post comments') && (user_access('administer comments') || $node->comment == COMMENT_NODE_OPEN)) {
    // Save the anonymous user information to a cookie for reuse.
    if (!$comment->uid) {
      user_cookie_save(array_intersect_key($form_state['values'], array_flip(array('name', 'mail', 'homepage'))));
    }

    comment_save($comment);
    $form_state['values']['cid'] = $comment->cid;

    // Add an entry to the watchdog log.
    watchdog('content', 'Comment posted: %subject.', array('%subject' => $comment->subject), WATCHDOG_NOTICE, l(t('view'), 'comment/' . $comment->cid, array('fragment' => 'comment-' . $comment->cid)));

    // Here is the modified block
    if ($comment->status == COMMENT_PUBLISHED) {
      drupal_set_message(t('Your comment has been posted.'));
    }
    $query = array();
    // Find the current display page for this comment.
    $page = comment_get_display_page($comment->cid, $node->type);
    if ($page > 0) {
      $query['page'] = $page;
    }
    // Redirect to the newly posted comment.
    $redirect = array('node/' . $node->nid, array('query' => $query, 'fragment' => 'comment-' . $comment->cid));
  }
  else {
    watchdog('content', 'Comment: unauthorized comment submitted or comment submitted to a closed post %subject.', array('%subject' => $comment->subject), WATCHDOG_WARNING);
    drupal_set_message(t('Comment: unauthorized comment submitted or comment submitted to a closed post %subject.', array('%subject' => $comment->subject)), 'error');
    // Redirect the user to the node they are commenting on.
    $redirect = 'node/' . $node->nid;
  }
  $form_state['redirect'] = $redirect;
  // Clear the block and page caches so that anonymous users see the comment
  // they have posted.
  cache_clear_all();
}

/**
 * Implementation of hook_mail()
 * @param string $key
 * @param array $message
 * @param array $params
 */
function commentaccess_mail($key, &$message, $params) {
  if ($key == 'commentaccess_email') {
    $subject = variable_get('commentaccess_mail_subject', '@commenter posted a new comment!');
    $body = variable_get('commentaccess_mail_message', commentaccess_mail_message_default());
    $langcode = isset($message['language']->language) ? $message['language']->language : NULL;
    $message['subject'] = t($subject, $params['replacements'], array('langcode' => $langcode));
    $message['body'][] = t($body, $params['replacements'], array('langcode' => $langcode)); 
  }
}

/**
 * This function defines the default message sent out by this module
 */
function commentaccess_mail_message_default() {
  return 
"Hey @approver,

@commenter posted a new comment[1] that needs to be approved.

Comment in @nodelink

@subject
-----------------------
@comment



You can approve or remove the comment here:

[1]@commentlink

Regards,
The @site team";
}

<?php

/**
 * @file pingvincode.module
 * Various stuff
 */

/**
 * Returns a node's field's items' specified key (raw data).
 */
function pingvincode_field_get_values($node, $fieldname, $index = NULL, $key = 'value') {
  $values = array();

  $items = field_get_items('node', $node, $fieldname);
  if (is_array($items)) {
    foreach ($items as $item) {
      $values[] = $key ? $item[$key] : $item;
    }
  }

  return (is_int($index) && isset($values[$index]) ? $values[$index] : $values);
}

function pingvincode_field_view_values($node, $fieldname, $index = NULL, $key = '#markup') {
  $values = array();

  $items = field_get_items('node', $node, $fieldname);
  if (is_array($items)) {
    foreach ($items as $item) {
      $value = field_view_value('node', $node, $fieldname, $item);
      $values[] = $key ? $value[$key] : $value;
    }
  }

  return (is_int($index) && isset($values[$index]) ? $values[$index] : $values);
}

/**
 * Implements hook_form_alter();
 */
function pingvincode_form_alter(&$form, &$form_state, $form_id) {
  // Fix the cool exposed buttons
  $form_ids = array(
    'views-exposed-form-dive-list-page-1',
    'views-exposed-form-site-list-page-1'
  );
  if (in_array($form['#id'], $form_ids)) {
    // Dive
    // Last dive
    if (!empty($form['sort_bef_combine']['#options']['field_log_depth_value DESC'])) {
      $form['sort_bef_combine']['#options']['field_log_depth_value DESC'] = t('Nyeste');
      unset($form['sort_bef_combine']['#options']['field_log_depth_value ASC']);
    }
    // Depth
    if (!empty($form['sort_bef_combine']['#options']['field_glob_date_value DESC'])) {
      $form['sort_bef_combine']['#options']['field_glob_date_value DESC'] = t('Dypest');
      $form['sort_bef_combine']['#options']['field_glob_date_value ASC'] = t('Grunnest');
      //unset($form['sort_bef_combine']['#options']['field_glob_date_value ASC']);
    }
    // Duration
    if (!empty($form['sort_bef_combine']['#options']['field_log_downtime_value DESC'])) {
      $form['sort_bef_combine']['#options']['field_log_downtime_value DESC'] = t('Lengst');
      $form['sort_bef_combine']['#options']['field_log_downtime_value ASC'] = t('Kortest');
      //unset($form['sort_bef_combine']['#options']['field_log_downtime_value ASC']);
    }

    // Site
    // Updated
    if (!empty($form['sort_bef_combine']['#options']['changed DESC'])) {
      $form['sort_bef_combine']['#options']['changed DESC'] = t('Sist endret');
      $form['sort_bef_combine']['#options']['changed ASC'] = t('Kortest');
      unset($form['sort_bef_combine']['#options']['changed ASC']);
    }
  }
}

/**
 * Token for creating address.
 */
function pingvincode_token_info($type = 'all') {
  $data['tokens']['node']['location_argument_parser'] = array(
    'name' => t('Location argument parser'),
    'description' => t('A custom location parser for location views.'),
  );
  $data['tokens']['node']['location_argument_20000'] = array(
    'name' => t('Location argument parser, fixed distance'),
    'description' => t('A custom location parser for location views.'),
  );
  $data['tokens']['node']['location_argument_300000'] = array(
    'name' => t('Location argument parser, fixed distance'),
    'description' => t('A custom location parser for location views.'),
  );

  return $data;
}

/**
 * Implements hook_token().
 */
function pingvincode_tokens($type, $tokens, array $data = array(), array $options = array()) {
  if ($type == 'entity') {

    $replacements = array();
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'location_argument_parser' :
          $entity = $data['entity'];
          if (isset($entity->field_map_point)) {
            $lat = pingvincode_field_get_values($entity, 'field_map_point', 0, 'latitude');
            $lon = pingvincode_field_get_values($entity, 'field_map_point', 0, 'longitude');
            $dist = pingvincode_field_get_values($entity, 'field_place_radius', 0, 'value');
            if (!empty($lat) && !empty($lon) && !empty($dist)) {
              $replacements[$original] = $lat . "," . $lon . "_" . $dist;
            }
          }
          break;
        case 'location_argument_20000' :
          $entity = $data['entity'];
          if (isset($entity->field_map_point)) {
            $lat = pingvincode_field_get_values($entity, 'field_map_point', 0, 'latitude');
            $lon = pingvincode_field_get_values($entity, 'field_map_point', 0, 'longitude');
            $dist = 20000;
            if (!empty($lat) && !empty($lon) && !empty($dist)) {
              $replacements[$original] = $lat . "," . $lon . "_" . $dist;
            }
          }
          break;
        case 'location_argument_300000' :
          $entity = $data['entity'];
          if (isset($entity->field_map_point)) {
            $lat = pingvincode_field_get_values($entity, 'field_map_point', 0, 'latitude');
            $lon = pingvincode_field_get_values($entity, 'field_map_point', 0, 'longitude');
            $dist = 300000;
            if (!empty($lat) && !empty($lon) && !empty($dist)) {
              $replacements[$original] = $lat . "," . $lon . "_" . $dist;
            }
          }
          break;
      }
    }
  }
  return $replacements;
}

function pingvincode_preprocess_views_view(&$vars) {
  // Get my view
  if ($vars['view']->name == 'discussions_on_divesites') {
    //get the title of the node shown in the view
    $nid = $vars['view']->argument[field_nodekobling_target_id]->argument;
    $node = node_load($nid);
    $my_title = 'Diskusjoner om ' . $node->title;

    /* Code to dynamically set title here...
      Override view's title since drupal_set_title() is not working. */
    $vars['view']->build_info['title'] = $my_title;
  }
}

/**
 * Implements hook_menu_alter().
 *
 * Use a title callback to replace the text shown on nodes' "View" tab.
 */
function pingvincode_menu_alter(&$items) {
  $items['node/%node/view']['title callback'] = 'pingvincode_view_tab_title';
  $items['node/%node/view']['title arguments'] = array(1);
}

/**
 * Callback for the menu title
 */
function pingvincode_view_tab_title($node) {
  switch ($node->type) {
    case 'divesite':
      return t('Dykkested');
    case 'log':
      return t('Loggføring');
    case 'club':
      return('Dykkerklubb');
    default:
      return t('View');
  }
}

/**
 * Primarily for sites, we programmatically collect information.
 * 
 * - Move lat / lon from geofield to location.
 * - Call geonames and get country / region
 */
function pingvincode_node_presave($node) {
  // If some location info...
  if (isset($node->field_map_geofield['und'][0]['lat'])) {
    // We use these..
    $lat = $node->field_map_geofield['und'][0]['lat'];
    $lon = $node->field_map_geofield['und'][0]['lon'];
    //Move coordinates from geofield to location
    $location = array(
      'lid' => '',
      'name' => '',
      'street' => '',
      'additional' => '',
      'city' => '',
      'province' => '',
      'postal_code' => '',
      'country' => 'no',
      'latitude' => $lat,
      'longitude' => $lon,
      'source' => '1',
      'is_primary' => '0',
      'locpick' =>
      array(
        'user_latitude' => (float) $lat,
        'user_longitude' => (float) $lon,
      ),
      'province_name' => '',
      'country_name' => 'Norway',
    );
    $node->field_map_point['und']['0'] = $location;

    // Add geonames to the lot
    $locative = pingvincode_geonames_info($lat, $lon);

    // First we set the text fields. (TODO remove these?)
    $node->field_map_region_1['und']['0']['value'] = $locative['region'];
    $node->field_map_country_1['und']['0']['value'] = $locative['country'];

    // Then we take berlin (the taxonomy).
    $country_tid = pingvincode_tax_search($locative['country']);
    if (!is_numeric($country_tid)) {
      $Cterms = new stdClass();
      $Cterms->vid = 7;
      $Cterms->name = $locative['country'];
      $Cterms->description = "";
      taxonomy_term_save($Cterms);
      $country_tid = $Cterms->tid;
    }

    // Now that we've created a term for country,
    // let's do this for region as well. Now we need the country's parent.
    $region_tid = pingvincode_tax_search($locative['region'], $country_tid);

    // If none, create one.
    if (!is_numeric($region_tid)) {
      $Rterms = new stdClass();
      $Rterms->vid = 7;
      $Rterms->name = $locative['region'];
      $Rterms->description = t("Et administrativt område i ") . l($country_value, "taxonomy/");
      $Rterms->format = "full_html";
      $Rterms->parent = $country_tid;
      taxonomy_term_save($Rterms);
      $region_tid = $Rterms->tid;
    }
    // We save the term to the node before it is saved in the database.
    $node->field_map_name_browser['und']['0']['tid'] = $region_tid;

    // Fix previous translations. Remove them. Gonna be deleted.
    unset($node->field_map_country);
    unset($node->field_map_region);

    // In case we have en or no on the ones we use, unset.
    unset($node->field_map_country_1['no']);
    unset($node->field_map_region_1['no']);
    
    // In some occations we have map_point [nb] defined. Remove that.
    unset($field_map_point['nb']);

    return $node;
  }
}

/**
 * Calls geonames & returns country & region
 */
function pingvincode_geonames_info($lat, $lon) {
  $query = array('lat' => $lat, 'lng' => $lon, 'radius' => 100, 'maxrows' => 1);
  $result = geonames_query('countrysubdivision', $query); // Call geonames.module
  dpm($result);
  if (!empty($result->results)) {
    foreach ($result->results as $place) {
      $region_value = $place[adminname1];
      $country_value = $place[countryname];
    }
  }
  else {
    $country_value = "Ukjent land";
    $region_value = "Ukjent region";
  };
  return array(
    'country' => $country_value,
    'region' => $region_value,
  );
}

/**
 * Search for a term in a specific taxonomy.
 */
function pingvincode_tax_search($item, $level = 0) {
  $result = db_query(
      "SELECT termdata.name, termdata.tid FROM `taxonomy_term_data` termdata
                    INNER JOIN taxonomy_term_hierarchy termhi ON termdata.tid = termhi.tid
                    WHERE termdata.name = :name AND termdata.vid = 7 AND termhi.parent = :level ;", array(
    ':name' => $item,
    ':level' => (is_numeric($level)) ? $level : 0
      )
  );
  foreach ($result as $record) {
    $tid = $record->tid;
  };
  return $tid;
}

function update_nodes(){
  for ($i=1;$i<241;$i++){
    $node = node_load($i);
  }
}
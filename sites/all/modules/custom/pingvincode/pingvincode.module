<?php

/**
 * @file pingvincode.module
 * Various stuff
 */

/**
 * Returns a node's field's items' specified key (raw data).
 */
function pingvincode_field_get_values($node, $fieldname, $index = NULL, $key = 'value') {
  $values = array();

  $items = field_get_items('node', $node, $fieldname);
  if (is_array($items)) {
    foreach ($items as $item) {
      $values[] = $key ? $item[$key] : $item;
    }
  }

  return (is_int($index) && isset($values[$index]) ? $values[$index] : $values);
}

function pingvincode_field_view_values($node, $fieldname, $index = NULL, $key = '#markup') {
  $values = array();

  $items = field_get_items('node', $node, $fieldname);
  if (is_array($items)) {
    foreach ($items as $item) {
      $value = field_view_value('node', $node, $fieldname, $item);
      $values[] = $key ? $value[$key] : $value;
    }
  }

  return (is_int($index) && isset($values[$index]) ? $values[$index] : $values);
}

/**
 * Implements hook_form_alter();
 */
function pingvincode_form_alter(&$form, &$form_state, $form_id) {
  //xdebug_break();
  $form_ids = array(
    'views-exposed-form-dive-list-page-1',
    'views-exposed-form-site-list-page-1'
  );
  if (in_array($form['#id'], $form_ids)) {
    // Dive
    // Last dive
    if (!empty($form['sort_bef_combine']['#options']['field_log_depth_value DESC'])) {
      $form['sort_bef_combine']['#options']['field_log_depth_value DESC'] = t('Nyeste');
      unset($form['sort_bef_combine']['#options']['field_log_depth_value ASC']);
    }
    // Depth
    if (!empty($form['sort_bef_combine']['#options']['field_glob_date_value DESC'])) {
      $form['sort_bef_combine']['#options']['field_glob_date_value DESC'] = t('Dypest');
      $form['sort_bef_combine']['#options']['field_glob_date_value ASC'] = t('Grunnest');
      //unset($form['sort_bef_combine']['#options']['field_glob_date_value ASC']);
    }
    // Duration
    if (!empty($form['sort_bef_combine']['#options']['field_log_downtime_value DESC'])) {
      $form['sort_bef_combine']['#options']['field_log_downtime_value DESC'] = t('Lengst');
      $form['sort_bef_combine']['#options']['field_log_downtime_value ASC'] = t('Kortest');
      //unset($form['sort_bef_combine']['#options']['field_log_downtime_value ASC']);
    }

    // Site
    // Updated
    if (!empty($form['sort_bef_combine']['#options']['changed DESC'])) {
      $form['sort_bef_combine']['#options']['changed DESC'] = t('Sist endret');
      $form['sort_bef_combine']['#options']['changed ASC'] = t('Kortest');
      unset($form['sort_bef_combine']['#options']['changed ASC']);
    }
  }
}

/**
 * Token for creating address.
 */
function pingvincode_token_info($type = 'all') {
  $data['tokens']['node']['location_argument_parser'] = array(
    'name' => t('Location argument parser'),
    'description' => t('A custom location parser for location views.'),
  );
  $data['tokens']['node']['location_argument_20000'] = array(
    'name' => t('Location argument parser, fixed distance'),
    'description' => t('A custom location parser for location views.'),
  );

  return $data;
}

/**
 * Implements hook_token().
 */
function pingvincode_tokens($type, $tokens, array $data = array(), array $options = array()) {
  if ($type == 'entity') {

    $replacements = array();
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'location_argument_parser' :
          $entity = $data['entity'];
          if (isset($entity->field_map_point)) {
            $lat = pingvincode_field_get_values($entity, 'field_map_point', 0, 'latitude');
            $lon = pingvincode_field_get_values($entity, 'field_map_point', 0, 'longitude');
            $dist = pingvincode_field_get_values($entity, 'field_place_radius', 0, 'value');
            if (!empty($lat) && !empty($lon) && !empty($dist)) {
              $replacements[$original] = $lat . "," . $lon . "_" . $dist;
            }
          }
          break;
        case 'location_argument_20000' :
          $entity = $data['entity'];
          if (isset($entity->field_map_point)) {
            $lat = pingvincode_field_get_values($entity, 'field_map_point', 0, 'latitude');
            $lon = pingvincode_field_get_values($entity, 'field_map_point', 0, 'longitude');
            $dist = 20000;
            if (!empty($lat) && !empty($lon) && !empty($dist)) {
              $replacements[$original] = $lat . "," . $lon . "_" . $dist;
            }
          }
          break;
      }
    }
  }
  return $replacements;
}

function pingvincode_preprocess_views_view(&$vars) {
  // Get my view
  if ($vars['view']->name == 'discussions_on_divesites') {
    //get the title of the node shown in the view
    $nid = $vars['view']->argument[field_nodekobling_target_id]->argument;
    $node = node_load($nid);
    $my_title = 'Diskusjoner om ' . $node->title;

    /* Code to dynamically set title here...
      Override view's title since drupal_set_title() is not working. */
    $vars['view']->build_info['title'] = $my_title;
  }
}

/**
 * Implements hook_menu_alter().
 *
 * Use a title callback to replace the text shown on nodes' "View" tab.
 */
function pingvincode_menu_alter(&$items) {
  $items['node/%node/view']['title callback'] = 'pingvincode_view_tab_title';
  $items['node/%node/view']['title arguments'] = array(1);
}

/**
 * Callback for the menu title
 */
function pingvincode_view_tab_title($node) {
  switch ($node->type) {
    case 'divesite':
      return t('Dykkested');
    case 'log':
      return t('Loggf√∏ring');
      case 'club':
        return('Dykkerklubb');
    default:
      return t('View');
  }
}